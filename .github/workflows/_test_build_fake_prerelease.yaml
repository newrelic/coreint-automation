name: Test Build Fake Prerelease

on:
  workflow_call:
    inputs:
      integration:
        required: true
        type: string
    secrets:
      OHAI_PFX_CERTIFICATE_BASE64:
        required: true
      OHAI_PFX_PASSPHRASE:
        required: true

jobs:
  test-build-nix:
    name: Test binary compilation for all platforms:arch
    runs-on: ubuntu-20.04
    env:
      INTEGRATION: ${{ inputs.integration }}
      REPO_FULL_NAME: ${{ github.event.repository.full_name }}
      TAG: "v0.0.0"
    steps:
      - uses: actions/checkout@v4
      - run: |
          git tag "$TAG"
          if [ -z "$GPG_PASSPHRASE" ]; then
            echo NO_SIGN=true >> $GITHUB_ENV
          fi
      - name: Build all platforms:arch
        run: make ci/fake-prerelease
      - name: Upload artifacts for next job
        uses: actions/upload-artifact@v3
        with:
          name: windows-packages
          path: dist/nri-*.zip

  test-build-windows:
    name: Create MSI
    runs-on: windows-latest
    needs: [test-build-nix]
    env:
      INTEGRATION: ${{ inputs.integration }}
      REPO_FULL_NAME: ${{ github.event.repository.full_name }}
      TAG: "v0.0.0"
      GOPATH: ${{ github.workspace }}
      PFX_CERTIFICATE_BASE64: ${{ secrets.OHAI_PFX_CERTIFICATE_BASE64 }}
      PFX_CERTIFICATE_DESCRIPTION: 'New Relic'
      PFX_PASSPHRASE: ${{ secrets.OHAI_PFX_PASSPHRASE }}
    defaults:
      run:
        working-directory: src/github.com/${{ github.event.repository.full_name }}
    strategy:
      matrix:
        goarch: [ amd64,386 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: src/github.com/${{ github.event.repository.full_name }}
      - shell: bash
        run: git tag "$TAG"

      - name: Download artifact from previous job
        uses: actions/download-artifact@v3
        with:
          name: windows-packages
          path: src/github.com/${{ github.event.repository.full_name }}/dist/

      - name: Get PFX certificate from GH secrets
        shell: bash
        run: |
          if [ -z "$PFX_CERTIFICATE_BASE64" ]; then
            echo NO_SIGN=true >> $GITHUB_ENV
          else
            printf "%s" "$PFX_CERTIFICATE_BASE64" | base64 -d - > wincert.pfx
          fi

      - name: Extract .exe
        shell: pwsh
        run: build\windows\extract_exe.ps1 "$env:INTEGRATION" ${{ matrix.goarch }} "$env:TAG"
      - name: Create MSI
        shell: pwsh
        run: build\windows\package_msi.ps1 -integration "$env:INTEGRATION" -arch ${{ matrix.goarch }} -tag "$env:TAG" -pfx_passphrase "$env:PFX_PASSPHRASE" -pfx_certificate_description "$env:PFX_CERTIFICATE_DESCRIPTION"
